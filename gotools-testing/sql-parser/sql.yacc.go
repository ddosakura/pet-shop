// Code generated by goyacc -o=sql.yacc.go sql.y. DO NOT EDIT.

//line sql.y:4

// Copyright 2014 sql-parser Author. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"
	"os"
)

//line sql.y:23
type yySymType struct {
	yys      int
	intval   int
	floatval float64
	strval   string
	subtok   int
}

const NAME = 57346
const STRING = 57347
const INTNUM = 57348
const BOOL = 57349
const APPROXNUM = 57350
const USERVAR = 57351
const ASSIGN = 57352
const OR = 57353
const XOR = 57354
const ANDOP = 57355
const IN = 57356
const IS = 57357
const LIKE = 57358
const REGEXP = 57359
const NOT = 57360
const BETWEEN = 57361
const COMPARISON = 57362
const SHIFT = 57363
const MOD = 57364
const UMINUS = 57365
const ADD = 57366
const ALL = 57367
const ALTER = 57368
const ANALYZE = 57369
const AND = 57370
const ANY = 57371
const AS = 57372
const ASC = 57373
const AUTO_INCREMENT = 57374
const BEFORE = 57375
const BIGINT = 57376
const BINARY = 57377
const BIT = 57378
const BLOB = 57379
const BOTH = 57380
const BY = 57381
const CALL = 57382
const CASCADE = 57383
const CASE = 57384
const CHANGE = 57385
const CHAR = 57386
const CHECK = 57387
const COLLATE = 57388
const COLUMN = 57389
const COMMENT = 57390
const CONDITION = 57391
const CONSTRAINT = 57392
const CONTINUE = 57393
const CONVERT = 57394
const CREATE = 57395
const CROSS = 57396
const CURRENT_DATE = 57397
const CURRENT_TIME = 57398
const CURRENT_TIMESTAMP = 57399
const CURRENT_USER = 57400
const CURSOR = 57401
const DATABASE = 57402
const DATABASES = 57403
const DATE = 57404
const DATETIME = 57405
const DAY_HOUR = 57406
const DAY_MICROSECOND = 57407
const DAY_MINUTE = 57408
const DAY_SECOND = 57409
const DECIMAL = 57410
const DECLARE = 57411
const DEFAULT = 57412
const DELAYED = 57413
const DELETE = 57414
const DESC = 57415
const DESCRIBE = 57416
const DETERMINISTIC = 57417
const DISTINCT = 57418
const DISTINCTROW = 57419
const DIV = 57420
const DOUBLE = 57421
const DROP = 57422
const DUAL = 57423
const EACH = 57424
const ELSE = 57425
const ELSEIF = 57426
const ENCLOSED = 57427
const END = 57428
const ENUM = 57429
const ESCAPED = 57430
const EXISTS = 57431
const EXIT = 57432
const EXPLAIN = 57433
const FETCH = 57434
const FLOAT = 57435
const FOR = 57436
const FORCE = 57437
const FOREIGN = 57438
const FROM = 57439
const FULLTEXT = 57440
const GRANT = 57441
const GROUP = 57442
const HAVING = 57443
const HIGH_PRIORITY = 57444
const HOUR_MICROSECOND = 57445
const HOUR_MINUTE = 57446
const HOUR_SECOND = 57447
const IF = 57448
const IGNORE = 57449
const INDEX = 57450
const INFILE = 57451
const INNER = 57452
const INOUT = 57453
const INSENSITIVE = 57454
const INSERT = 57455
const INT = 57456
const INTEGER = 57457
const INTERVAL = 57458
const INTO = 57459
const ITERATE = 57460
const JOIN = 57461
const KEY = 57462
const KEYS = 57463
const KILL = 57464
const LEADING = 57465
const LEAVE = 57466
const LEFT = 57467
const LIMIT = 57468
const LINES = 57469
const LOAD = 57470
const LOCALTIME = 57471
const LOCALTIMESTAMP = 57472
const LOCK = 57473
const LONG = 57474
const LONGBLOB = 57475
const LONGTEXT = 57476
const LOOP = 57477
const LOW_PRIORITY = 57478
const MATCH = 57479
const MEDIUMBLOB = 57480
const MEDIUMINT = 57481
const MEDIUMTEXT = 57482
const MINUTE_MICROSECOND = 57483
const MINUTE_SECOND = 57484
const MODIFIES = 57485
const NATURAL = 57486
const NO_WRITE_TO_BINLOG = 57487
const NULLX = 57488
const NUMBER = 57489
const ON = 57490
const ONDUPLICATE = 57491
const OPTIMIZE = 57492
const OPTION = 57493
const OPTIONALLY = 57494
const ORDER = 57495
const OUT = 57496
const OUTER = 57497
const OUTFILE = 57498
const PRECISION = 57499
const PRIMARY = 57500
const PROCEDURE = 57501
const PURGE = 57502
const QUICK = 57503
const READ = 57504
const READS = 57505
const REAL = 57506
const REFERENCES = 57507
const RELEASE = 57508
const RENAME = 57509
const REPEAT = 57510
const REPLACE = 57511
const REQUIRE = 57512
const RESTRICT = 57513
const RETURN = 57514
const REVOKE = 57515
const RIGHT = 57516
const ROLLUP = 57517
const SCHEMA = 57518
const SCHEMAS = 57519
const SECOND_MICROSECOND = 57520
const SELECT = 57521
const SENSITIVE = 57522
const SEPARATOR = 57523
const SET = 57524
const SHOW = 57525
const SMALLINT = 57526
const SOME = 57527
const SONAME = 57528
const SPATIAL = 57529
const SPECIFIC = 57530
const SQL = 57531
const SQLEXCEPTION = 57532
const SQLSTATE = 57533
const SQLWARNING = 57534
const SQL_BIG_RESULT = 57535
const SQL_CALC_FOUND_ROWS = 57536
const SQL_SMALL_RESULT = 57537
const SSL = 57538
const STARTING = 57539
const STRAIGHT_JOIN = 57540
const TABLE = 57541
const TEMPORARY = 57542
const TEXT = 57543
const TERMINATED = 57544
const THEN = 57545
const TIME = 57546
const TIMESTAMP = 57547
const TINYBLOB = 57548
const TINYINT = 57549
const TINYTEXT = 57550
const TO = 57551
const TRAILING = 57552
const TRIGGER = 57553
const UNDO = 57554
const UNION = 57555
const UNIQUE = 57556
const UNLOCK = 57557
const UNSIGNED = 57558
const UPDATE = 57559
const USAGE = 57560
const USE = 57561
const USING = 57562
const UTC_DATE = 57563
const UTC_TIME = 57564
const UTC_TIMESTAMP = 57565
const VALUES = 57566
const VARBINARY = 57567
const VARCHAR = 57568
const VARYING = 57569
const WHEN = 57570
const WHERE = 57571
const WHILE = 57572
const WITH = 57573
const WRITE = 57574
const YEAR = 57575
const YEAR_MONTH = 57576
const ZEROFILL = 57577
const FSUBSTRING = 57578
const FTRIM = 57579
const FDATE_ADD = 57580
const FDATE_SUB = 57581
const FCOUNT = 57582

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NAME",
	"STRING",
	"INTNUM",
	"BOOL",
	"APPROXNUM",
	"USERVAR",
	"ASSIGN",
	"OR",
	"XOR",
	"ANDOP",
	"IN",
	"IS",
	"LIKE",
	"REGEXP",
	"NOT",
	"'!'",
	"BETWEEN",
	"COMPARISON",
	"'|'",
	"'&'",
	"SHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"MOD",
	"'^'",
	"UMINUS",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"AS",
	"ASC",
	"AUTO_INCREMENT",
	"BEFORE",
	"BIGINT",
	"BINARY",
	"BIT",
	"BLOB",
	"BOTH",
	"BY",
	"CALL",
	"CASCADE",
	"CASE",
	"CHANGE",
	"CHAR",
	"CHECK",
	"COLLATE",
	"COLUMN",
	"COMMENT",
	"CONDITION",
	"CONSTRAINT",
	"CONTINUE",
	"CONVERT",
	"CREATE",
	"CROSS",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DATETIME",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"DECIMAL",
	"DECLARE",
	"DEFAULT",
	"DELAYED",
	"DELETE",
	"DESC",
	"DESCRIBE",
	"DETERMINISTIC",
	"DISTINCT",
	"DISTINCTROW",
	"DIV",
	"DOUBLE",
	"DROP",
	"DUAL",
	"EACH",
	"ELSE",
	"ELSEIF",
	"ENCLOSED",
	"END",
	"ENUM",
	"ESCAPED",
	"EXISTS",
	"EXIT",
	"EXPLAIN",
	"FETCH",
	"FLOAT",
	"FOR",
	"FORCE",
	"FOREIGN",
	"FROM",
	"FULLTEXT",
	"GRANT",
	"GROUP",
	"HAVING",
	"HIGH_PRIORITY",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"IF",
	"IGNORE",
	"INDEX",
	"INFILE",
	"INNER",
	"INOUT",
	"INSENSITIVE",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERVAL",
	"INTO",
	"ITERATE",
	"JOIN",
	"KEY",
	"KEYS",
	"KILL",
	"LEADING",
	"LEAVE",
	"LEFT",
	"LIMIT",
	"LINES",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCK",
	"LONG",
	"LONGBLOB",
	"LONGTEXT",
	"LOOP",
	"LOW_PRIORITY",
	"MATCH",
	"MEDIUMBLOB",
	"MEDIUMINT",
	"MEDIUMTEXT",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MODIFIES",
	"NATURAL",
	"NO_WRITE_TO_BINLOG",
	"NULLX",
	"NUMBER",
	"ON",
	"ONDUPLICATE",
	"OPTIMIZE",
	"OPTION",
	"OPTIONALLY",
	"ORDER",
	"OUT",
	"OUTER",
	"OUTFILE",
	"PRECISION",
	"PRIMARY",
	"PROCEDURE",
	"PURGE",
	"QUICK",
	"READ",
	"READS",
	"REAL",
	"REFERENCES",
	"RELEASE",
	"RENAME",
	"REPEAT",
	"REPLACE",
	"REQUIRE",
	"RESTRICT",
	"RETURN",
	"REVOKE",
	"RIGHT",
	"ROLLUP",
	"SCHEMA",
	"SCHEMAS",
	"SECOND_MICROSECOND",
	"SELECT",
	"SENSITIVE",
	"SEPARATOR",
	"SET",
	"SHOW",
	"SMALLINT",
	"SOME",
	"SONAME",
	"SPATIAL",
	"SPECIFIC",
	"SQL",
	"SQLEXCEPTION",
	"SQLSTATE",
	"SQLWARNING",
	"SQL_BIG_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"SQL_SMALL_RESULT",
	"SSL",
	"STARTING",
	"STRAIGHT_JOIN",
	"TABLE",
	"TEMPORARY",
	"TEXT",
	"TERMINATED",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TINYBLOB",
	"TINYINT",
	"TINYTEXT",
	"TO",
	"TRAILING",
	"TRIGGER",
	"UNDO",
	"UNION",
	"UNIQUE",
	"UNLOCK",
	"UNSIGNED",
	"UPDATE",
	"USAGE",
	"USE",
	"USING",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"VALUES",
	"VARBINARY",
	"VARCHAR",
	"VARYING",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WRITE",
	"YEAR",
	"YEAR_MONTH",
	"ZEROFILL",
	"FSUBSTRING",
	"FTRIM",
	"FDATE_ADD",
	"FDATE_SUB",
	"FCOUNT",
	"';'",
	"','",
	"'.'",
	"'('",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:895

func emit(format string, a ...interface{}) {
	fmt.Fprintf(os.Stdout, format, a...)
	fmt.Fprintln(os.Stdout, "")
}

func yyerror(format string, a ...interface{}) {
	fmt.Fprintf(os.Stderr, format, a...)
	fmt.Fprintln(os.Stderr, "")
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 15,
	4, 125,
	253, 125,
	-2, 98,
	-1, 80,
	128, 59,
	-2, 41,
	-1, 86,
	4, 126,
	253, 126,
	-2, 99,
	-1, 87,
	4, 127,
	253, 127,
	-2, 102,
	-1, 136,
	229, 91,
	251, 91,
	-2, 6,
	-1, 195,
	14, 0,
	15, 0,
	16, 0,
	17, 0,
	-2, 292,
	-1, 196,
	14, 0,
	15, 0,
	16, 0,
	17, 0,
	-2, 294,
	-1, 231,
	128, 59,
	-2, 42,
	-1, 261,
	14, 0,
	15, 0,
	16, 0,
	17, 0,
	-2, 293,
	-1, 262,
	14, 0,
	15, 0,
	16, 0,
	17, 0,
	-2, 295,
	-1, 417,
	250, 138,
	-2, 210,
	-1, 546,
	250, 139,
	-2, 210,
}

const yyPrivate = 57344

const yyLast = 1659

var yyAct = [...]int{

	573, 289, 201, 580, 310, 444, 518, 287, 397, 335,
	367, 534, 368, 456, 3, 393, 279, 356, 200, 341,
	241, 156, 81, 45, 362, 339, 328, 617, 604, 346,
	563, 220, 616, 83, 105, 106, 104, 114, 112, 116,
	117, 115, 603, 113, 107, 108, 109, 111, 98, 99,
	100, 101, 102, 103, 110, 123, 124, 125, 606, 606,
	598, 607, 605, 597, 132, 312, 346, 346, 135, 585,
	584, 432, 105, 106, 104, 114, 112, 116, 117, 115,
	389, 113, 107, 108, 109, 111, 98, 99, 100, 101,
	102, 103, 110, 387, 594, 346, 165, 166, 583, 45,
	159, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 183, 184, 185, 186, 449, 190, 312, 551, 195,
	196, 418, 383, 382, 546, 202, 385, 313, 381, 346,
	205, 207, 543, 213, 214, 346, 514, 219, 542, 516,
	514, 203, 514, 515, 380, 513, 379, 206, 208, 105,
	106, 104, 114, 112, 116, 117, 115, 83, 113, 107,
	108, 109, 111, 98, 99, 100, 101, 102, 103, 110,
	235, 105, 106, 104, 114, 112, 116, 117, 115, 313,
	113, 107, 108, 109, 111, 98, 99, 100, 101, 102,
	103, 110, 346, 322, 251, 512, 261, 262, 321, 250,
	316, 309, 308, 230, 449, 418, 259, 448, 417, 270,
	258, 346, 271, 144, 347, 268, 247, 11, 593, 540,
	276, 277, 266, 265, 281, 263, 248, 227, 120, 121,
	539, 533, 519, 531, 497, 496, 119, 493, 293, 447,
	422, 286, 421, 416, 292, 415, 413, 411, 46, 48,
	49, 51, 50, 47, 425, 283, 407, 298, 340, 260,
	320, 254, 53, 54, 294, 228, 269, 317, 318, 319,
	52, 118, 326, 296, 253, 324, 221, 384, 331, 323,
	252, 334, 85, 325, 191, 131, 130, 129, 65, 228,
	141, 212, 128, 127, 126, 61, 141, 145, 342, 353,
	330, 346, 359, 342, 222, 501, 221, 343, 63, 64,
	62, 351, 349, 350, 338, 502, 443, 348, 344, 144,
	138, 221, 95, 360, 361, 443, 139, 92, 366, 33,
	364, 365, 388, 375, 295, 19, 391, 97, 236, 392,
	394, 450, 55, 398, 599, 357, 386, 140, 402, 275,
	11, 217, 274, 11, 216, 91, 11, 144, 610, 395,
	410, 406, 549, 600, 312, 239, 237, 26, 405, 280,
	342, 189, 299, 244, 256, 588, 210, 373, 412, 426,
	429, 394, 188, 226, 80, 243, 336, 372, 431, 423,
	427, 396, 267, 428, 430, 291, 344, 16, 285, 371,
	133, 424, 595, 74, 71, 420, 85, 400, 306, 305,
	452, 264, 454, 455, 240, 304, 12, 358, 414, 301,
	300, 154, 460, 494, 495, 234, 313, 548, 329, 458,
	459, 461, 79, 89, 75, 377, 498, 370, 499, 76,
	315, 363, 161, 43, 70, 503, 504, 378, 31, 77,
	398, 601, 506, 602, 509, 337, 505, 13, 508, 535,
	157, 110, 225, 211, 511, 139, 451, 96, 73, 409,
	94, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 93, 554, 27, 155, 119, 530, 408, 532, 57,
	58, 59, 60, 56, 218, 541, 218, 242, 544, 545,
	536, 537, 538, 345, 297, 557, 66, 29, 72, 22,
	550, 137, 122, 14, 552, 32, 69, 151, 158, 187,
	118, 561, 255, 11, 23, 25, 17, 229, 167, 231,
	609, 575, 78, 215, 574, 576, 562, 577, 578, 579,
	168, 164, 618, 556, 582, 67, 88, 614, 611, 596,
	587, 586, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 15, 46, 48, 49, 51, 50, 47, 581, 74,
	68, 223, 284, 150, 90, 290, 53, 54, 302, 303,
	553, 288, 457, 307, 52, 44, 453, 192, 152, 193,
	194, 419, 35, 560, 404, 608, 589, 590, 592, 591,
	75, 401, 65, 374, 612, 87, 613, 149, 615, 61,
	354, 46, 48, 49, 51, 50, 47, 352, 249, 555,
	246, 245, 63, 64, 62, 53, 54, 233, 224, 198,
	197, 559, 162, 52, 86, 160, 143, 153, 163, 142,
	136, 182, 209, 36, 37, 180, 30, 469, 481, 463,
	484, 65, 2, 10, 18, 282, 55, 479, 61, 369,
	9, 147, 8, 46, 48, 49, 51, 50, 47, 38,
	7, 63, 64, 62, 6, 474, 477, 53, 54, 5,
	4, 473, 355, 84, 82, 52, 547, 558, 376, 314,
	1, 311, 471, 98, 99, 100, 101, 102, 103, 110,
	491, 462, 517, 65, 28, 55, 472, 232, 24, 115,
	61, 113, 107, 108, 109, 111, 98, 99, 100, 101,
	102, 103, 110, 63, 64, 62, 21, 467, 468, 109,
	111, 98, 99, 100, 101, 102, 103, 110, 510, 100,
	101, 102, 103, 110, 238, 148, 486, 490, 146, 500,
	199, 485, 466, 489, 34, 20, 0, 55, 0, 0,
	41, 42, 40, 0, 0, 39, 0, 0, 0, 105,
	106, 104, 114, 112, 116, 117, 115, 470, 113, 107,
	108, 109, 111, 98, 99, 100, 101, 102, 103, 110,
	0, 0, 0, 0, 0, 492, 0, 465, 0, 0,
	0, 181, 0, 57, 58, 59, 60, 56, 0, 0,
	0, 0, 0, 0, 488, 0, 0, 475, 476, 483,
	464, 487, 113, 107, 108, 109, 111, 98, 99, 100,
	101, 102, 103, 110, 0, 0, 0, 0, 482, 480,
	0, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 0, 57, 58, 59, 60, 56, 0, 0, 0,
	179, 105, 106, 104, 114, 112, 116, 117, 115, 0,
	113, 107, 108, 109, 111, 98, 99, 100, 101, 102,
	103, 110, 105, 106, 104, 114, 112, 116, 117, 115,
	0, 113, 107, 108, 109, 111, 98, 99, 100, 101,
	102, 103, 110, 0, 57, 58, 59, 60, 56, 107,
	108, 109, 111, 98, 99, 100, 101, 102, 103, 110,
	0, 0, 0, 433, 434, 435, 436, 105, 106, 104,
	114, 112, 116, 117, 115, 0, 113, 107, 108, 109,
	111, 98, 99, 100, 101, 102, 103, 110, 108, 109,
	111, 98, 99, 100, 101, 102, 103, 110, 0, 0,
	0, 0, 439, 440, 441, 105, 106, 104, 114, 112,
	116, 117, 115, 0, 113, 107, 108, 109, 111, 98,
	99, 100, 101, 102, 103, 110, 46, 48, 49, 51,
	50, 47, 46, 48, 49, 51, 50, 47, 0, 0,
	53, 54, 0, 0, 0, 0, 53, 54, 52, 442,
	0, 0, 0, 0, 52, 46, 48, 49, 51, 50,
	47, 0, 0, 0, 0, 0, 65, 0, 0, 53,
	54, 0, 65, 61, 0, 0, 0, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 63, 64, 62, 0,
	0, 0, 63, 64, 62, 65, 0, 0, 0, 0,
	0, 507, 61, 0, 0, 0, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 63, 64, 62, 0, 0,
	55, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	403, 0, 438, 437, 0, 0, 46, 48, 49, 51,
	50, 47, 46, 48, 49, 51, 50, 47, 0, 55,
	53, 54, 0, 0, 0, 0, 53, 54, 52, 0,
	0, 0, 273, 0, 52, 204, 46, 48, 49, 51,
	50, 47, 0, 0, 0, 0, 65, 0, 0, 0,
	53, 54, 65, 61, 0, 0, 0, 0, 52, 61,
	0, 0, 0, 0, 0, 0, 63, 64, 62, 0,
	0, 0, 63, 64, 62, 0, 65, 272, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 46, 48,
	49, 51, 50, 47, 0, 0, 63, 64, 62, 0,
	55, 0, 53, 54, 0, 0, 55, 0, 0, 0,
	52, 0, 0, 0, 0, 264, 111, 98, 99, 100,
	101, 102, 103, 110, 0, 0, 0, 0, 65, 0,
	55, 0, 0, 0, 0, 61, 0, 57, 58, 59,
	60, 56, 0, 57, 58, 59, 60, 56, 63, 64,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 58, 59, 60,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	11, 105, 106, 104, 114, 112, 116, 117, 115, 0,
	113, 107, 108, 109, 111, 98, 99, 100, 101, 102,
	103, 110, 105, 106, 104, 114, 112, 116, 117, 115,
	0, 113, 107, 108, 109, 111, 98, 99, 100, 101,
	102, 103, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 58, 59,
	60, 56, 0, 57, 58, 59, 60, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 57, 58, 59,
	60, 56, 105, 106, 104, 114, 112, 116, 117, 115,
	0, 113, 107, 108, 109, 111, 98, 99, 100, 101,
	102, 103, 110, 105, 106, 104, 114, 112, 116, 117,
	115, 0, 113, 107, 108, 109, 111, 98, 99, 100,
	101, 102, 103, 110, 0, 0, 0, 0, 0, 57,
	58, 59, 60, 56, 105, 106, 104, 114, 112, 116,
	117, 115, 0, 113, 107, 108, 109, 111, 98, 99,
	100, 101, 102, 103, 110, 105, 106, 104, 114, 112,
	116, 117, 115, 0, 113, 107, 108, 109, 111, 98,
	99, 100, 101, 102, 103, 110, 105, 106, 104, 114,
	112, 116, 117, 115, 0, 113, 107, 108, 109, 111,
	98, 99, 100, 101, 102, 103, 110, 0, 327, 0,
	0, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 0, 0, 134, 390, 106,
	104, 114, 112, 116, 117, 115, 0, 113, 107, 108,
	109, 111, 98, 99, 100, 101, 102, 103, 110, 332,
	0, 119, 0, 0, 0, 0, 0, 446, 105, 106,
	104, 114, 112, 116, 117, 115, 0, 113, 107, 108,
	109, 111, 98, 99, 100, 101, 102, 103, 110, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 278, 105, 106, 104, 114, 112, 116,
	117, 115, 0, 113, 107, 108, 109, 111, 98, 99,
	100, 101, 102, 103, 110, 0, 0, 0, 0, 0,
	257, 105, 106, 104, 114, 112, 116, 117, 115, 0,
	113, 107, 108, 109, 111, 98, 99, 100, 101, 102,
	103, 110, 104, 114, 112, 116, 117, 115, 0, 113,
	107, 108, 109, 111, 98, 99, 100, 101, 102, 103,
	110, 114, 112, 116, 117, 115, 0, 113, 107, 108,
	109, 111, 98, 99, 100, 101, 102, 103, 110,
}
var yyPact = [...]int{

	335, 335, 85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 298, 506, 79, -1000,
	558, 400, 323, 323, 153, 489, 318, 318, 147, -1000,
	76, -1000, 460, -1000, 216, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1527, -24, 502, -1000, -1000,
	-1000, -1000, 1174, 1174, 1174, 41, 40, 39, 34, 33,
	32, 1122, -1000, -1000, -1000, 1174, 636, -1000, -1000, -1000,
	214, 44, 635, -1000, -1000, -1000, -1000, -1000, 632, 106,
	454, -1000, -1000, 232, 421, 29, -1000, -1000, 631, 344,
	628, 318, 506, 1174, 1174, 153, 1174, -1000, 1174, 1174,
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 607, 1174, 1174,
	1174, 1174, 364, 1174, 31, 573, 1174, 1174, 626, -1000,
	625, 1174, 1174, -1000, 802, 802, 168, 1098, 1174, 244,
	1174, 1174, 1270, 259, 1174, -1000, 38, 75, 153, 624,
	-1000, 435, 36, 12, 153, 623, 297, 153, 202, 231,
	-1000, -1000, -1000, -1000, 269, 617, 616, -1000, -38, -28,
	-1000, -1000, -1000, 614, -1000, 1590, 1590, 68, -1000, 712,
	712, 430, 430, 430, 430, 1627, 1497, 1609, 926, 168,
	27, 21, 8, 706, 1182, -1000, 668, -1000, 367, -1000,
	1563, 1092, 6, 1174, 1174, 691, 691, -1000, -1000, -29,
	-1000, 954, 1590, -31, -32, 138, -39, 160, -45, 1174,
	-1000, -1000, -1000, 916, 871, 257, -1000, 1174, 1174, 1361,
	207, 1174, 153, 68, 44, -1000, 165, 577, 571, 162,
	577, 454, 83, 252, 153, 215, 292, -1000, 291, 202,
	202, -1000, 286, 280, 279, 481, -1000, -1000, -1000, -51,
	331, -54, 168, 168, 168, -1000, -1000, 1174, -56, -61,
	1092, 691, 691, -1000, 1174, -1000, -1000, -1000, -1000, 1174,
	-1000, 1382, 303, 303, -1000, 1174, 1434, 1291, 1174, 251,
	407, 1590, 68, -1000, -1000, 5, 212, 145, 482, -40,
	-1000, 5, 212, 145, 207, 613, 1174, 606, 188, 1174,
	153, 153, -1000, -1000, 338, 338, 338, 269, 270, 599,
	-1000, 421, -1000, -1000, 325, 399, -1000, -108, -110, -126,
	888, -1000, -1000, -131, -132, -1000, 23, 1174, -161, 1174,
	-174, 1413, -1000, 1174, 1590, -1000, 1174, 1174, -1000, 140,
	988, -1000, 278, -1000, 597, 1011, 590, -1000, 140, -1000,
	-1000, 251, 235, 1590, 448, -1000, -1000, 1174, -6, 1590,
	188, -1000, -7, 290, -8, -10, -1000, -46, -1000, 587,
	276, -11, -13, 272, 1, 168, 207, 1174, 1174, -1000,
	-1000, -1000, -1000, -1000, -1000, 1174, -183, -1000, 850, -1000,
	-1000, 1590, 758, 74, 1455, -1000, -14, -47, 1590, -1000,
	115, 445, 1590, -1000, -1000, -1000, -1000, 1174, 582, 1174,
	1590, 571, -1000, 578, -1000, 578, 578, 248, 270, 604,
	-16, 571, 571, -18, -19, 270, -1000, -1000, 251, 1590,
	65, 61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1174, 1174, -1000, -1000, -1000, 988, -1000, 982,
	577, 659, 1590, 443, 1590, -59, -109, -1000, -111, -115,
	-1000, -1000, -1000, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -1000, -1000, -1000, -1000, -1000, -21,
	-20, -21, -22, -1000, -1000, -1000, -1000, 415, 415, 415,
	415, -23, -34, 571, -116, -122, 571, 571, -130, 301,
	-1000, 178, -1000, 1590, 1455, -136, 1590, -1000, 67, 1590,
	-1000, 1174, -1000, -1000, 576, -1000, -1000, 464, -1000, 530,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 528, -1000, 525, -1000, -1000, -1000, -1000, -1000, 563,
	563, -156, -1000, -1000, -184, -185, 248, -1000, 571, -1000,
	-1000, -1000, 1590, -1000, 220, -1000, 591, -1000, -35, 273,
	-1000, 544, -191, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 398, -212, -226, 398, 398, 398, 398,
	-192, -1000, -193, -1000, -1000, -1000, -1000, 50, -1000, -1000,
	-1000, -1000, -1000, 571, -1000, -1000, -1000, -1000, 524, -1000,
	-1000, 167, 543, -1000, -1000, -1000, 542, -1000, -222, -227,
	537, -1000, 398, 398, -1000, 398, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 755, 754, 18, 750, 400, 15, 749, 5, 432,
	748, 338, 745, 744, 1, 13, 24, 726, 444, 509,
	8, 25, 7, 546, 708, 707, 704, 6, 11, 30,
	3, 702, 701, 691, 10, 690, 652, 14, 31, 689,
	688, 16, 9, 686, 2, 443, 337, 384, 22, 684,
	20, 683, 21, 682, 17, 680, 347, 679, 508, 383,
	19, 674, 670, 662, 660, 4, 12, 659, 0, 653,
	646, 448, 642, 26,
}
var yyR1 = [...]int{

	0, 35, 35, 36, 37, 37, 38, 38, 39, 39,
	6, 6, 8, 8, 8, 7, 7, 40, 40, 41,
	41, 42, 42, 42, 43, 43, 14, 14, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	45, 9, 9, 47, 47, 48, 48, 48, 48, 52,
	52, 46, 46, 46, 49, 49, 49, 49, 49, 10,
	10, 10, 11, 11, 12, 12, 13, 13, 13, 53,
	53, 54, 54, 50, 50, 50, 50, 16, 16, 15,
	15, 51, 36, 55, 17, 17, 17, 17, 55, 18,
	18, 56, 56, 55, 36, 57, 60, 60, 19, 19,
	19, 19, 19, 58, 58, 59, 59, 21, 21, 20,
	20, 20, 20, 57, 57, 22, 22, 22, 22, 36,
	61, 61, 61, 36, 62, 24, 24, 24, 25, 25,
	25, 25, 36, 63, 63, 23, 23, 36, 64, 64,
	64, 64, 64, 64, 34, 34, 67, 66, 66, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 27, 27, 27, 28,
	28, 29, 29, 29, 68, 68, 68, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 30, 30, 65,
	33, 33, 33, 26, 26, 36, 69, 70, 70, 71,
	71, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 3, 3, 4, 4, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 72, 72, 72, 44, 44, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 44, 44, 44, 44,
	5, 5, 44, 44, 44, 44, 44, 44, 44, 44,
}
var yyR2 = [...]int{

	0, 2, 3, 1, 3, 11, 0, 2, 0, 4,
	2, 4, 0, 1, 1, 0, 2, 0, 2, 0,
	3, 0, 2, 4, 0, 2, 1, 3, 0, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 3, 1,
	2, 1, 3, 1, 1, 3, 5, 3, 3, 1,
	0, 2, 1, 0, 5, 3, 5, 6, 5, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 0, 1,
	0, 2, 4, 6, 6, 6, 0, 2, 0, 1,
	3, 3, 1, 7, 2, 2, 2, 0, 6, 2,
	4, 0, 2, 7, 1, 8, 0, 4, 0, 2,
	2, 2, 2, 1, 0, 0, 3, 3, 5, 1,
	1, 3, 3, 7, 7, 3, 3, 5, 5, 1,
	8, 7, 7, 1, 8, 0, 2, 2, 3, 5,
	5, 7, 1, 4, 4, 0, 2, 1, 8, 10,
	9, 6, 11, 8, 1, 3, 0, 4, 5, 4,
	4, 5, 5, 0, 3, 2, 3, 3, 3, 3,
	2, 5, 3, 3, 2, 3, 0, 3, 5, 0,
	1, 0, 2, 2, 0, 4, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 3, 5, 2, 4, 1, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 1, 3, 3,
	0, 1, 1, 0, 1, 1, 2, 1, 3, 3,
	3, 1, 1, 3, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 5,
	6, 6, 6, 3, 3, 3, 3, 2, 2, 3,
	3, 4, 3, 4, 5, 1, 3, 0, 1, 5,
	6, 5, 6, 4, 4, 4, 4, 4, 6, 8,
	4, 7, 1, 1, 1, 6, 6, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 6, 3, 5,
	4, 5, 3, 4, 3, 4, 1, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -35, -36, -37, -55, -57, -61, -62, -63, -64,
	-69, 188, 81, 122, 178, 226, 62, 191, -36, 250,
	-1, -17, -19, -19, -24, -19, 69, 185, -26, 209,
	-70, -71, 9, 250, -2, 34, 85, 86, 111, 207,
	204, 202, 203, -45, 27, -44, 4, 9, 5, 6,
	8, 7, 26, 18, 19, 98, 249, 245, 246, 247,
	248, 51, 66, 64, 65, 44, 106, 145, 170, 116,
	-18, 4, -58, 145, 80, 111, 116, 126, -58, -9,
	-47, -48, -49, 4, -51, 253, 145, 116, -23, 115,
	-23, 208, 251, 21, 10, 106, 251, -46, 25, 26,
	27, 28, 29, 30, 13, 11, 12, 21, 22, 23,
	31, 24, 15, 20, 14, 18, 16, 17, 39, 4,
	252, 253, 10, -44, -44, -44, 253, 253, 253, 253,
	253, 253, -44, -5, 237, -44, 4, -18, 106, 251,
	-56, 252, 4, 4, 251, 191, -10, 207, -12, 153,
	119, 63, 134, 183, -46, 252, -52, 39, -9, -37,
	4, 98, 4, -23, -71, -44, -44, -9, -45, -44,
	-44, -44, -44, -44, -44, -44, -44, -44, -44, 253,
	38, 194, 34, -44, -44, -44, -44, 155, 18, 7,
	-44, 253, 14, 16, 17, -44, -44, 4, 4, -4,
	-3, -44, -44, -37, 27, -44, -3, -44, -3, -72,
	132, 219, 47, -44, -44, -5, 95, 92, 237, -44,
	-38, 238, 229, -9, 4, 27, -59, 191, 253, -59,
	191, -47, -25, 4, 128, -48, -11, 164, -13, 134,
	183, -50, 228, 116, 104, 4, 4, 254, 254, 4,
	-38, -37, 253, 253, 253, 155, 7, 37, -3, -37,
	253, -44, -44, 254, 251, 254, 254, 254, 254, 106,
	254, -44, 251, 251, 95, 92, -44, -44, 212, -41,
	162, -44, -9, -38, -56, 233, -37, -22, 4, -14,
	4, 233, -37, -22, -38, 251, 21, 252, -48, 157,
	128, 128, -11, -11, 129, 129, 129, -46, 253, 252,
	-65, -33, 116, 178, -39, 109, 254, -37, -37, -37,
	-44, 254, 254, -3, -37, -3, -44, 106, -73, 125,
	-73, -44, 95, 212, -44, -42, 135, 48, -38, -21,
	253, -60, 158, -60, 251, 21, 251, 254, -21, -60,
	-60, -41, 4, -44, 4, -53, -54, 157, 229, -44,
	-48, -48, -16, 103, -16, -16, -50, -34, -66, -67,
	167, 129, 117, 107, 4, -52, -40, 110, 48, 254,
	254, 254, 254, 254, 254, 103, -3, 254, -44, 254,
	95, -44, -44, -6, -44, -60, 251, -20, -44, 79,
	129, 4, -44, 79, 4, -60, -42, 21, 252, 21,
	-44, 253, -54, 253, 128, 253, 253, 254, 251, 4,
	129, 253, 253, 117, 129, 253, -65, -37, -41, -44,
	-6, -44, 254, 73, 74, 75, 76, 243, 242, 112,
	113, 114, 251, 251, -8, 40, 82, 253, 254, 251,
	226, 21, -44, 4, -44, -14, -15, 4, -15, -15,
	-65, -66, -32, 45, 216, 193, 148, 123, 124, 43,
	173, 88, 102, 77, 71, 213, 214, 72, 242, 53,
	235, 44, 234, 215, 46, 147, 142, 217, 210, 149,
	143, 96, 191, 253, -14, -14, 253, 253, -34, -42,
	-7, 240, 254, -44, -44, -20, -44, 79, -22, -44,
	79, 21, 254, 254, 251, 254, 254, -31, -27, 253,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, 253, -27, 253, -28, 44, -28, -28, -28, 253,
	253, -14, 254, 254, -14, -14, 254, -43, 126, 184,
	-8, 254, -44, 4, 18, 155, 79, 41, 223, 167,
	129, 57, 6, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -68, 6, 6, -68, -68, -68, -68,
	-30, 5, -30, 254, 254, 254, -65, -14, 155, 5,
	6, 8, 7, 253, 129, 129, 5, 254, 251, 225,
	244, 53, 55, 254, 254, 254, 251, 254, -14, 6,
	191, 5, -68, -68, 5, -68, 254, 254, 5,
}
var yyDef = [...]int{

	0, -2, 0, 3, 82, 94, 119, 123, 132, 137,
	215, 28, 87, 98, 98, -2, 213, 0, 0, 1,
	0, 0, 104, 104, 0, 0, 135, 135, 0, 214,
	216, 217, 0, 2, 4, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 39, 53, 221, 222, 224, 225,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 297, 298, 0, 0, 84, 85, 86,
	0, 91, 0, 99, 100, 101, 102, 103, 0, 0,
	-2, 43, 44, 53, 50, 0, -2, -2, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 257, 0, 234, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, -2, 0, 0, 0,
	89, 0, 105, 105, 0, 0, 0, 0, 62, 68,
	60, 61, 64, 65, 76, 0, 0, 49, 0, 0,
	133, 136, 134, 0, 218, 219, 220, 6, 38, 228,
	229, 230, 231, 232, 233, 235, 236, 237, 238, 0,
	0, 0, 0, 243, 244, 245, 246, 250, 0, 252,
	0, 0, 0, 0, 0, -2, -2, 51, 223, 0,
	258, 255, 249, 0, 0, 0, 0, 255, 0, 0,
	272, 273, 274, 0, 0, 0, 288, 0, 0, 0,
	19, 0, 0, 6, 91, 92, 0, 0, 0, 0,
	0, -2, 6, 0, 0, 55, 0, 63, 0, 62,
	62, 45, 0, 0, 0, 53, 47, 48, 81, 210,
	8, 0, 0, 0, 0, 251, 253, 0, 0, 0,
	0, -2, -2, 264, 0, 263, 265, 266, 267, 0,
	270, 0, 0, 0, 286, 0, 0, 0, 0, 21,
	0, 7, 6, 88, 90, 0, 96, 96, 0, 0,
	26, 0, 96, 96, 19, 0, 0, 0, 70, 0,
	0, 0, 66, 67, 78, 78, 78, 76, 146, 0,
	141, 50, 211, 212, 17, 0, 239, 0, 0, 0,
	254, 259, 261, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 289, 0, 290, 83, 0, 0, 93, 96,
	0, 114, 0, 113, 0, 0, 0, 106, 96, 122,
	121, 21, 0, 128, 0, 54, 69, 0, 0, 56,
	0, 58, 0, 0, 0, 0, 46, 0, 144, 0,
	0, 0, 0, 0, 210, 0, 19, 0, 0, 240,
	241, 242, 260, 262, 268, 0, 0, 275, 0, 276,
	287, 291, 22, 20, 12, 95, 0, 0, 109, 110,
	0, 0, 115, 116, 27, 120, 124, 0, 0, 0,
	71, 0, 57, 0, 77, 0, 0, -2, 146, 0,
	0, 0, 0, 0, 0, 146, 143, 209, 21, 18,
	15, 0, 271, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 0, 0, 10, 13, 14, 0, 107, 0,
	0, 0, 130, 0, 129, 0, 0, 79, 0, 0,
	140, 145, 153, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 188, 189, 190, 191, 192, 166,
	0, 166, 0, 197, 198, 199, 200, 169, 169, 169,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	9, 0, 269, 23, 12, 0, 111, 112, 97, 117,
	118, 0, 72, 73, 0, 74, 75, 147, 177, 0,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	174, 0, 195, 0, 174, 170, 174, 174, 174, 0,
	0, 0, 149, 150, 0, 0, -2, 5, 0, 16,
	11, 108, 131, 80, 0, 155, 0, 160, 0, 0,
	164, 0, 0, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 193, 0, 0, 201, 202, 203, 204,
	0, 207, 0, 148, 151, 152, 142, 25, 154, 156,
	157, 158, 159, 0, 162, 163, 165, 167, 0, 172,
	173, 0, 0, 174, 196, 174, 0, 174, 0, 0,
	0, 176, 194, 205, 208, 206, 161, 168, 175,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 19, 3, 3, 3, 29, 23, 3,
	253, 254, 27, 25, 251, 26, 252, 28, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 250,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 31, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 22,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 20, 21, 24,
	30, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:310
		{
			emit("STMT")
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:314
		{
			emit("SELECTNODATA %d %d", yyDollar[2].intval, yyDollar[3].intval)
		}
	case 5:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:318
		{
			emit("SELECT %d %d %d", yyDollar[2].intval, yyDollar[3].intval, yyDollar[5].intval)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:322
		{
			emit("WHERE")
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:326
		{
			emit("GROUPBYLIST %d %d", yyDollar[3].intval, yyDollar[4].intval)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:330
		{
			emit("GROUPBY %d", yyDollar[2].intval)
			yyVAL.intval = 1
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:332
		{
			emit("GROUPBY %d", yyDollar[4].intval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:335
		{
			yyVAL.intval = 0
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.intval = 0
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
			yyVAL.intval = 1
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:340
		{
			yyVAL.intval = 0
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:341
		{
			yyVAL.intval = 1
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:344
		{
			emit("HAVING")
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:346
		{
			emit("ORDERBY %d", yyDollar[3].intval)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:349
		{
			emit("LIMIT 1")
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:350
		{
			emit("LIMIT 2")
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:354
		{
			emit("INTO %d", yyDollar[2].intval)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:357
		{
			emit("COLUMN %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:358
		{
			emit("COLUMN %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:361
		{
			yyVAL.intval = 0
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:362
		{
			if yyVAL.intval&01 != 0 {
				yyerror("duplicate ALL option")
			}
			yyVAL.intval = yyDollar[1].intval | 01
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:363
		{
			if yyVAL.intval&02 != 0 {
				yyerror("duplicate DISTINCT option")
			}
			yyVAL.intval = yyDollar[1].intval | 02
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:364
		{
			if yyVAL.intval&04 != 0 {
				yyerror("duplicate DISTINCTROW option")
			}
			yyVAL.intval = yyDollar[1].intval | 04
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:365
		{
			if yyVAL.intval&010 != 0 {
				yyerror("duplicate HIGH_PRIORITY option")
			}
			yyVAL.intval = yyDollar[1].intval | 010
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:366
		{
			if yyVAL.intval&020 != 0 {
				yyerror("duplicate STRAIGHT_JOIN option")
			}
			yyVAL.intval = yyDollar[1].intval | 020
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:367
		{
			if yyVAL.intval&040 != 0 {
				yyerror("duplicate SQL_SMALL_RESULT option")
			}
			yyVAL.intval = yyDollar[1].intval | 040
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:368
		{
			if yyVAL.intval&0100 != 0 {
				yyerror("duplicate SQL_BIG_RESULT option")
			}
			yyVAL.intval = yyDollar[1].intval | 0100
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:369
		{
			if yyVAL.intval&0200 != 0 {
				yyerror("duplicate SQL_CALC_FOUND_ROWS option")
			}
			yyVAL.intval = yyDollar[1].intval | 0200
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:372
		{
			yyVAL.intval = 1
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:373
		{
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			emit("SELECTALL")
			yyVAL.intval = 1
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.intval = 1
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:380
		{
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:388
		{
			emit("TABLE %s", yyDollar[1].strval)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:389
		{
			emit("TABLE %s.%s", yyDollar[1].strval, yyDollar[3].strval)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			emit("SUBQUERYAS %s", yyDollar[3].strval)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:392
		{
			emit("TABLEREFERENCES %d", yyDollar[2].intval)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:399
		{
			emit("ALIAS %s", yyDollar[2].strval)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			emit("ALIAS %s", yyDollar[1].strval)
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:406
		{
			emit("JOIN %d", 0100+yyDollar[2].intval)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:408
		{
			emit("JOIN %d", 0200)
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:410
		{
			emit("JOIN %d", 0200)
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:412
		{
			emit("JOIN %d", 0300+yyDollar[2].intval+yyDollar[3].intval)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:414
		{
			emit("JOIN %d", 0400+yyDollar[3].intval)
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:417
		{
			yyVAL.intval = 0
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.intval = 1
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:419
		{
			yyVAL.intval = 2
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:422
		{
			yyVAL.intval = 0
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.intval = 4
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.intval = 1
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.intval = 2
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:430
		{
			yyVAL.intval = 1 + yyDollar[2].intval
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:431
		{
			yyVAL.intval = 2 + yyDollar[2].intval
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:432
		{
			yyVAL.intval = 0
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:438
		{
			emit("ONEXPR")
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:439
		{
			emit("USING %d", yyDollar[3].intval)
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:444
		{
			emit("INDEXHINT %d %d", yyDollar[5].intval, 010+yyDollar[3].intval)
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			emit("INDEXHINT %d %d", yyDollar[5].intval, 020+yyDollar[3].intval)
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:448
		{
			emit("INDEXHINT %d %d", yyDollar[5].intval, 030+yyDollar[3].intval)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:452
		{
			yyVAL.intval = 1
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:453
		{
			yyVAL.intval = 0
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			emit("INDEX %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:457
		{
			emit("INDEX %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:460
		{
			emit("SUBQUERY")
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
			emit("STMT")
		}
	case 83:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:470
		{
			emit("DELETEONE %d %s", yyDollar[2].intval, yyDollar[4].strval)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:473
		{
			yyVAL.intval = yyDollar[1].intval + 01
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:474
		{
			yyVAL.intval = yyDollar[1].intval + 02
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:475
		{
			yyVAL.intval = yyDollar[1].intval + 04
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:476
		{
			yyVAL.intval = 0
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:482
		{
			emit("DELETEMULTI %d %d %d", yyDollar[2].intval, yyDollar[3].intval, yyDollar[5].intval)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:484
		{
			emit("TABLE %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:486
		{
			emit("TABLE %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:494
		{
			emit("DELETEMULTI %d %d %d", yyDollar[2].intval, yyDollar[4].intval, yyDollar[6].intval)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			fmt.Println("STMT")
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:505
		{
			fmt.Printf("INSERTVALS %d %d %s\n", yyDollar[2].intval, yyDollar[7].intval, yyDollar[4].strval)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			emit("DUPUPDATE %d", yyDollar[4].intval)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
			yyVAL.intval = 0
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:513
		{
			yyVAL.intval = yyDollar[1].intval | 01
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:514
		{
			yyVAL.intval = yyDollar[1].intval | 02
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.intval = yyDollar[1].intval | 04
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.intval = yyDollar[1].intval | 010
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			emit("INSERTCOLS %d", yyDollar[2].intval)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			emit("VALUES %d", yyDollar[2].intval)
			yyVAL.intval = 1
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:527
		{
			emit("VALUES %d", yyDollar[4].intval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:530
		{
			yyVAL.intval = 1
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			emit("DEFAULT")
			yyVAL.intval = 1
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			emit("DEFAULT")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 113:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:539
		{
			emit("INSERTASGN %d %d %s", yyDollar[2].intval, yyDollar[6].intval, yyDollar[4].strval)
		}
	case 114:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:544
		{
			emit("INSERTSELECT %d %s", yyDollar[2].intval, yyDollar[4].strval)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:549
		{
			if yyDollar[2].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].strval)
			}
			emit("ASSIGN %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			if yyDollar[2].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].strval)
			}
			emit("DEFAULT")
			emit("ASSIGN %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:555
		{
			if yyDollar[4].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].intval)
			}
			emit("ASSIGN %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:558
		{
			if yyDollar[4].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].intval)
			}
			emit("DEFAULT")
			emit("ASSIGN %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			emit("STMT")
		}
	case 120:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:569
		{
			emit("REPLACEVALS %d %d %s", yyDollar[2].intval, yyDollar[7].intval, yyDollar[4].strval)
		}
	case 121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:575
		{
			emit("REPLACEASGN %d %d %s", yyDollar[2].intval, yyDollar[6].intval, yyDollar[4].strval)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:580
		{
			emit("REPLACESELECT %d %s", yyDollar[2].intval, yyDollar[4].strval)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			emit("STMT")
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:591
		{
			emit("UPDATE %d %d %d", yyDollar[2].intval, yyDollar[3].intval, yyDollar[5].intval)
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:594
		{
			yyVAL.intval = 0
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.intval = yyDollar[1].intval | 01
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.intval = yyDollar[1].intval | 010
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:601
		{
			if yyDollar[2].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].strval)
			}
			emit("ASSIGN %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:604
		{
			if yyDollar[4].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[1].strval)
			}
			emit("ASSIGN %s.%s", yyDollar[1].strval, yyDollar[3].strval)
			yyVAL.intval = 1
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:607
		{
			if yyDollar[4].subtok != 4 {
				yyerror("bad insert assignment to %s", yyDollar[3].strval)
			}
			emit("ASSIGN %s.%s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 131:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:610
		{
			if yyDollar[6].subtok != 4 {
				yyerror("bad insert assignment to %s.$s", yyDollar[3].strval, yyDollar[5].strval)
			}
			emit("ASSIGN %s.%s", yyDollar[3].strval, yyDollar[5].strval)
			yyVAL.intval = 1
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			emit("STMT")
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:621
		{
			emit("CREATEDATABASE %d %s", yyDollar[3].intval, yyDollar[4].strval)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:622
		{
			emit("CREATEDATABASE %d %s", yyDollar[3].intval, yyDollar[4].strval)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:625
		{
			yyVAL.intval = 0
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			if yyDollar[2].subtok == 0 {
				yyerror("IF EXISTS doesn't exist")
			}
			yyVAL.intval = yyDollar[2].subtok /* NOT EXISTS hack */
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			emit("STMT")
		}
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:635
		{
			emit("CREATE %d %d %d %s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[7].intval, yyDollar[5].strval)
		}
	case 139:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:639
		{
			emit("CREATE %d %d %d %s.%s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[9].intval, yyDollar[5].strval, yyDollar[7].strval)
		}
	case 140:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:645
		{
			emit("CREATESELECT %d %d %d %s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[7].intval, yyDollar[5].strval)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:649
		{
			emit("CREATESELECT %d %d 0 %s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[5].strval)
		}
	case 142:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:654
		{
			emit("CREATESELECT %d %d 0 %s.%s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[5].strval, yyDollar[7].strval)
		}
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:659
		{
			emit("CREATESELECT %d %d 0 %s.%s", yyDollar[2].intval, yyDollar[4].intval, yyDollar[5].strval, yyDollar[7].strval)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.intval = 1
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:664
		{
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:667
		{
			emit("STARTCOL")
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:668
		{
			emit("COLUMNDEF %d %s", yyDollar[3].intval, yyDollar[2].strval)
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:670
		{
			emit("PRIKEY %d", yyDollar[4].intval)
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:671
		{
			emit("KEY %d", yyDollar[3].intval)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			emit("KEY %d", yyDollar[3].intval)
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:673
		{
			emit("TEXTINDEX %d", yyDollar[4].intval)
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:674
		{
			emit("TEXTINDEX %d", yyDollar[4].intval)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:677
		{
			yyVAL.intval = 0
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:678
		{
			emit("ATTR NOTNULL")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			emit("ATTR DEFAULT STRING %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			emit("ATTR DEFAULT NUMBER %d", yyDollar[3].intval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			emit("ATTR DEFAULT FLOAT %g", yyDollar[3].floatval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			emit("ATTR DEFAULT BOOL %d", yyDollar[3].intval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:684
		{
			emit("ATTR AUTOINC")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:685
		{
			emit("ATTR UNIQUEKEY %d", yyDollar[4].intval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			emit("ATTR UNIQUEKEY")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			emit("ATTR PRIKEY")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:688
		{
			emit("ATTR PRIKEY")
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:689
		{
			emit("ATTR COMMENT %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:692
		{
			yyVAL.intval = 0
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:693
		{
			yyVAL.intval = yyDollar[2].intval
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:694
		{
			yyVAL.intval = yyDollar[2].intval + 1000*yyDollar[4].intval
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:697
		{
			yyVAL.intval = 0
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.intval = 4000
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:701
		{
			yyVAL.intval = 0
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.intval = yyDollar[1].intval | 1000
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:703
		{
			yyVAL.intval = yyDollar[1].intval | 2000
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:707
		{
			emit("COLCHARSET %s", yyDollar[4].strval)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:708
		{
			emit("COLCOLLATE %s", yyDollar[3].strval)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:712
		{
			yyVAL.intval = 10000 + yyDollar[2].intval
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.intval = 10000 + yyDollar[2].intval
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:714
		{
			yyVAL.intval = 20000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.intval = 30000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:716
		{
			yyVAL.intval = 40000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:717
		{
			yyVAL.intval = 50000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:718
		{
			yyVAL.intval = 60000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyVAL.intval = 70000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:720
		{
			yyVAL.intval = 80000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:721
		{
			yyVAL.intval = 90000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:722
		{
			yyVAL.intval = 110000 + yyDollar[2].intval + yyDollar[3].intval
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.intval = 100001
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.intval = 100002
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.intval = 100003
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.intval = 100004
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.intval = 100005
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:728
		{
			yyVAL.intval = 120000 + yyDollar[2].intval
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:729
		{
			yyVAL.intval = 130000 + yyDollar[3].intval
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			yyVAL.intval = 140000 + yyDollar[2].intval
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:731
		{
			yyVAL.intval = 150000 + yyDollar[3].intval
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.intval = 160001
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.intval = 160002
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.intval = 160003
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.intval = 160004
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.intval = 170000 + yyDollar[2].intval
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:737
		{
			yyVAL.intval = 171000 + yyDollar[2].intval
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:738
		{
			yyVAL.intval = 172000 + yyDollar[2].intval
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.intval = 173000 + yyDollar[2].intval
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:740
		{
			yyVAL.intval = 200000 + yyDollar[3].intval
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:741
		{
			yyVAL.intval = 210000 + yyDollar[3].intval
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			emit("ENUMVAL %s", yyDollar[1].strval)
			yyVAL.intval = 1
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:745
		{
			emit("ENUMVAL %s", yyDollar[3].strval)
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			emit("CREATESELECT %d", yyDollar[1].intval)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:751
		{
			yyVAL.intval = 0
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.intval = 1
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.intval = 2
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:756
		{
			yyVAL.intval = 0
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.intval = 1
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			emit("STMT")
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			if yyDollar[2].subtok != 4 {
				yyerror("bad set to @%s", yyDollar[1].strval)
			}
			emit("SET %s", yyDollar[1].strval)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			emit("SET %s", yyDollar[1].strval)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			emit("NAME %s", yyDollar[1].strval)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			emit("USERVAR %s", yyDollar[1].strval)
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			emit("FIELDNAME %s.%s", yyDollar[1].strval, yyDollar[3].strval)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			emit("STRING %s", yyDollar[1].strval)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			emit("NUMBER %d", yyDollar[1].intval)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			emit("FLOAT %g", yyDollar[1].floatval)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			emit("BOOL %d", yyDollar[1].intval)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			emit("ADD")
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			emit("SUB")
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:788
		{
			emit("MUL")
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			emit("DIV")
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			emit("MOD")
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			emit("MOD")
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			emit("NEG")
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:793
		{
			emit("AND")
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			emit("OR")
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			emit("XOR")
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			emit("CMP %d", yyDollar[2].subtok)
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:797
		{
			emit("CMPSELECT %d", yyDollar[2].subtok)
		}
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:798
		{
			emit("CMPANYSELECT %d", yyDollar[2].subtok)
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:799
		{
			emit("CMPANYSELECT %d", yyDollar[2].subtok)
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:800
		{
			emit("CMPALLSELECT %d", yyDollar[2].subtok)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			emit("BITOR")
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			emit("BITAND")
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:803
		{
			emit("BITXOR")
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:804
		{
			if yyDollar[2].subtok == 1 {
				emit("SHIFT left")
			} else {
				emit("SHIFT right")
			}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			emit("NOT")
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			emit("NOT")
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:807
		{
			emit("ASSIGN @%s", yyDollar[1].strval)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			emit("ISNULL")
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:811
		{
			emit("ISNULL")
			emit("NOT")
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			emit("ISBOOL %d", yyDollar[3].intval)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:813
		{
			emit("ISBOOL %d", yyDollar[4].intval)
			emit("NOT")
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:816
		{
			emit("BETWEEN")
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.intval = 1
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.intval = 1 + yyDollar[3].intval
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:824
		{
			yyVAL.intval = 0
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:828
		{
			emit("ISIN %d", yyDollar[4].intval)
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:829
		{
			emit("ISIN %d", yyDollar[5].intval)
			emit("NOT")
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:830
		{
			emit("INSELECT")
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:831
		{
			emit("INSELECT")
			emit("NOT")
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:832
		{
			emit("EXISTS")
			if yyDollar[1].subtok != 0 {
				emit("NOT")
			}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:835
		{
			emit("CALL %d %s", yyDollar[3].intval, yyDollar[1].strval)
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:839
		{
			emit("COUNTALL")
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:840
		{
			emit(" CALL 1 COUNT")
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:842
		{
			emit("CALL %d SUBSTR", yyDollar[3].intval)
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:843
		{
			emit("CALL 2 SUBSTR")
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:844
		{
			emit("CALL 3 SUBSTR")
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:845
		{
			emit("CALL %d TRIM", yyDollar[3].intval)
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:846
		{
			emit("CALL 3 TRIM")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			emit("INT 1")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			emit("INT 2")
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			emit("INT 3")
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			emit("CALL 3 DATE_ADD")
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:855
		{
			emit("CALL 3 DATE_SUB")
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:858
		{
			emit("NUMBER 1")
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:859
		{
			emit("NUMBER 2")
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			emit("NUMBER 3")
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			emit("NUMBER 4")
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			emit("NUMBER 5")
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:863
		{
			emit("NUMBER 6")
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			emit("NUMBER 7")
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			emit("NUMBER 8")
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:866
		{
			emit("NUMBER 9")
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:869
		{
			emit("CASEVAL %d 0", yyDollar[3].intval)
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:870
		{
			emit("CASEVAL %d 1", yyDollar[3].intval)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:871
		{
			emit("CASE %d 0", yyDollar[2].intval)
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:872
		{
			emit("CASE %d 1", yyDollar[2].intval)
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:875
		{
			yyVAL.intval = 1
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:876
		{
			yyVAL.intval = yyDollar[1].intval + 1
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:879
		{
			emit("LIKE")
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:880
		{
			emit("LIKE")
			emit("NOT")
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:883
		{
			emit("REGEXP")
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			emit("REGEXP")
			emit("NOT")
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			emit("NOW")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			emit("NOW")
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			emit("NOW")
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			emit("STRTOBIN")
		}
	}
	goto yystack /* stack new state and value */
}
